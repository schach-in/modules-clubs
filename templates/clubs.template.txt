# clubs module
# HTML output: search clubs or schools
#
# Part of »Zugzwang Project«
# https://www.zugzwang.org/modules/clubs
#
# @author Gustaf Mossakowski <gustaf@koenige.org>
# @copyright Copyright © 2015-2024 Gustaf Mossakowski
# @license http://opensource.org/licenses/lgpl-3.0.html LGPL-3.0
#
# List of fields:
# reselect { place_id, licence, osm_type, osm_id, boundingbox, lat, lon,
# display_name, place_rank, category, type, importance, icon }, q, places
#
<div id="fullmap" class="smallmap"> </div>
%%% unless embed %%%
<div class="box"></div>
<div class="innerbox">
<p class="logo-right">
%%% if title | q | lat | lon %%%
<a href="/deutschland" target="_top">
%%% endif %%%
<img src="%%% setting layout_path %%%/schachin/logo-schachvereine-60.png" alt="" width="60" height="60" srcset='%%% setting layout_path %%%/schachin/logo-schachvereine-60.png 1x, %%% setting layout_path %%%/schachin/logo-schachvereine-120.png 2x'>
%%% if title | q | lat | lon %%%
</a>
%%% endif %%%
</p>

%%% if title %%%
<h1><a href="/deutschland" target="_top">Schachvereine</a>: %%% item title %%%</h1>
%%% else %%%
<h1>
%%% if q | lat | lon %%%
<a href="/deutschland" target="_top">
%%% endif %%%
Schachvereine und Schulschachgruppen
%%% if q | lat | lon %%%
</a>
%%% endif %%%
</h1>
%%% endif %%%
<div class="innerbox_detail">
%%% if description | links %%%
%%% item description markdown %%%
%%% if links %%%
<ul class="awards-links">
%%% loop links %%%
<li><a href="%%% item url %%%">%%% item title %%%</a></li>
%%% loop end %%%
</ul>
%%% endif %%%
%%% else %%%
<p>In Deutschland gibt es %%% item vereine %%% Schachvereine. Finde hier den richtigen für Dich!</p>
%%% endif %%%

%%% if q %%%
<h2>Suche: %%% item q wrap_html_escape %%%</h2>
%%% elseif lat & lon %%%
<h2>Suche: Im Umkreis von %%% item lat wrap_latitude %%% / %%% item lon wrap_longitude %%%</h2>
%%% endif %%%
<p class="explanation">Anzahl der angezeigten Spielorte:&nbsp;%%% item places %%%</p>

</div>
<div class="search">
<form action="/" method="GET">
<input type="text" name="q" value="%%% item q wrap_html_escape %%%" maxlength="64" placeholder="PLZ oder Ort">
<input type="submit" value="Such!">
<p class="explanation">Postleitzahl (oder Beginn davon, wie z. B. 28 = Bremen)
oder Ortsname</p>
</form>
</div>
<div class="innerbox_detail">

<div id="filters">
</div>

%%% if reselect | verbaende %%%

<h2>Weitere Treffer</h2>
<ul class="hits">
%%% loop verbaende %%%
<li><a href="%%% item identifier %%%/"><strong>%%% item contact %%%</strong>%%% item main_contact " (%s)" %%%</a></li>
%%% loop end %%%
%%% loop reselect %%%
<li><a href="./?lat=%%% item lat %%%&amp;lon=%%% item lon %%%">%%% item display_name %%%</a></li>
%%% loop end %%%
</ul>
%%% else %%%
<h2><a href="liste/">Liste der %%% if contact_category %%%%%% item contact_category %%%%%% else %%%Vereine%%% endif %%%</a></h2>
%%% endif %%%

</div>
<div id="clubs"></div>
</div>
%%% endif %%%

%%% template leaflet-js %%%
<script src="%%% setting behaviour_path %%%/clubs/mapfilters.js"></script>
<script type="text/javascript">
	%%% template leaflet-tiles-mapbox %%%

	var width = (window.innerWidth > 0) ? window.innerWidth : screen.width;
	var map = L.map('fullmap').addLayer(tiles);

%%% unless q %%%
%%% unless lat %%%
%%% unless title %%%
	map.locate({setView: true, maxZoom: 12});
%%% endif %%%
%%% endif %%%
%%% endif %%%

	var oldIcons = [];
	function hoverMarker() {
		var id = this.getAttribute('data-leaflet-id');
		if (oldIcons[id]) {
			map._layers[id].setIcon(oldIcons[id]);
			oldIcons[id] = false;
		} else if (map._layers[id].options.icon) {
			oldIcons[id] = map._layers[id].options.icon;
			map._layers[id].setIcon(hoverIcon);
		}
	}

	L.Icon.Default.imagePath = '/_layout/clubs/leaflet/';
	var schuleIcon = new L.Icon.Default({
		iconUrl: 'marker-icon-red.png',
		iconRetinaUrl: 'marker-icon-red-2x.png'
	});
	var schuleStar = new L.Icon.Default({
		iconUrl: 'marker-star-red.png',
		iconRetinaUrl: 'marker-star-red-2x.png'
	});
	var vereinIcon = new L.Icon.Default({
		iconUrl: 'marker-icon.png',
		iconRetinaUrl: 'marker-icon-2x.png'
	});
	var vereinStar = new L.Icon.Default({
		iconUrl: 'marker-star-blue.png',
		iconRetinaUrl: 'marker-star-blue-2x.png'
	});
	var kindergartenIcon = new L.Icon.Default({
		iconUrl: 'marker-icon-gold.png',
		iconRetinaUrl: 'marker-icon-gold-2x.png'
	});
	var kindergartenStar = new L.Icon.Default({
		iconUrl: 'marker-star-gold.png',
		iconRetinaUrl: 'marker-star-gold-2x.png'
	});
	var hortIcon = new L.Icon.Default({
		iconUrl: 'marker-icon-orange.png',
		iconRetinaUrl: 'marker-icon-orange-2x.png'
	});
	var hoverIcon = new L.Icon.Default({
		iconUrl: 'marker-icon-yellow.png',
		iconRetinaUrl: 'marker-icon-yellow-2x.png'
	});
        
	var markers = L.markerClusterGroup({maxClusterRadius: 20});
	// @todo set to 10 if zoom is above 10
	var geoJsonLayer; // Declare geoJsonLayer in the global scope
	var geojsonData; // Declare geojsonData to store the fetched data

	// Define the properties we want to filter
	var filterProperties = [
		{ name: 'members', label: '%%% text Minimum members %%%', max: %%% item max_members %%%, step: %%% setting clubs_map_filter_steps %%% },
		{ name: 'u25', label: '%%% text Minimum U25 members %%%', max: %%% item max_u25 %%%, step: %%% setting clubs_map_filter_steps %%% },
		{ name: 'female', label: '%%% text Minimum female members %%%', max: %%% item max_female %%%, step: %%% setting clubs_map_filter_steps %%% }
	];

	var geoJsonUrl = '%%% path clubs_geojson geojson %%%';

	fetch(geoJsonUrl)
		.then(function (response) { return response.json() })
		.then(function (locations) {
			geojsonData = locations; // Store the fetched data
			geoJsonLayer = L.geoJson(locations, {
				pointToLayer: function(feature, latlng) {
					if (feature.properties.category == 'schulschachgruppe') {
						if (feature.properties.awards > 0) {
							var myIcon = schuleStar;
						} else {
							var myIcon = schuleIcon;
						}
					} else if (feature.properties.category == 'schachkindergarten') {
						if (feature.properties.awards > 0) {
							var myIcon = kindergartenStar;
						} else {
							var myIcon = kindergartenIcon;
						}
					} else if (feature.properties.category == 'schachhort') {
						var myIcon = hortIcon;
					} else {
						if (feature.properties.awards > 0) {
							var myIcon = vereinStar;
						} else {
							var myIcon = vereinIcon;
						}
					}
					return L.marker(latlng, {
						icon: myIcon, title: feature.properties.org,
						link: feature.properties.identifier, category: feature.properties.category
					});
				},
				onEachFeature: function (feature, layer) {
					var popupText = '<div class="popup"><h2><a href="%%% setting base_path %%%/' + feature.properties.identifier + '/">' + feature.properties.org + '</a></h2>';
					if (feature.properties.members) {
						popupText += '<p>Mitglieder: ' + feature.properties.members;
						if (feature.properties.u25) {
							 popupText += '<br>Mitglieder U25: ' + feature.properties.u25;
						}
						if (feature.properties.female) {
							 popupText += '<br>Mitglieder weiblich: ' + feature.properties.female;
						}
						popupText += '<br>ø-Alter: ' + feature.properties.avg_age
						+ '<br>ø-DWZ: ' + feature.properties.avg_rating
					}
					popupText += "<p class='more'><a href='%%% setting base_path %%%/" + feature.properties.identifier + "/'>Weitere Informationen</a></p>";
					popupText += '</div>';
					layer.bindPopup(popupText);
				}
			});
			markers.addLayer(geoJsonLayer);
			map.addLayer(markers);

			// Initial filter call
			clubsCreateFilterControls();
			clubsFilterMap();
        
			map.on('move', function() {
				// Construct an empty list to fill with onscreen markers.
				var inBounds = [],
				// Get the map bounds - the top-left and bottom-right locations.
					bounds = map.getBounds();
				var listed = [];

				// For each marker, consider whether it is currently visible by comparing
				// with the current map bounds.
				geoJsonLayer.eachLayer(function(marker) {
					if (bounds.contains(marker.getLatLng())) {
						var a = document.createElement('a');
						a.href = '%%% setting base_path %%%/' + marker.options.link + '/';
						a.setAttribute('data-leaflet-id', marker._leaflet_id);
						a.setAttribute('class', marker.options.category);
						a.onmouseover = hoverMarker;
						a.onmouseout = hoverMarker;
						var text = document.createTextNode(marker.options.title);
						a.appendChild(text);
						if (listed.indexOf(marker.options.link) === -1) {
							listed.push(marker.options.link);
							inBounds.push(a);
						}
					}
				});

				var myNode = document.getElementById('clubs');
				while (myNode.firstChild) {
				   myNode.removeChild(myNode.firstChild);
				}
				if (inBounds.length > 0 && inBounds.length < 30) {
					var h2 = document.createElement('h2');
					h2.appendChild(document.createTextNode('Auf der Karte:'));
					myNode.appendChild(h2);
					// Display a list of markers.
					var ul = document.createElement('ul');
					for (i = 0; i < inBounds.length; i++) {
						var li = document.createElement('li');
						li.appendChild(inBounds[i]);
						li.setAttribute('class', inBounds[i].className);
						ul.appendChild(li);
					}
					myNode.appendChild(ul);
				}
			});

		%%% if boundingbox %%%
			if (width > 640) {
				map.fitBounds(%%% item boundingbox %%%, {maxZoom: %%% item maxzoom %%%, paddingTopLeft: [5, 5], paddingBottomRight: [300, 5] });
			} else {
				map.fitBounds(%%% item boundingbox %%%, {maxZoom: %%% item maxzoom %%%, paddingTopLeft: [50, 0], paddingBottomRight: [20, 0] });
			}
		%%% elseif zoomtofit %%%
			if (width > 640) {
				map.fitBounds(markers.getBounds(), {maxZoom: 12, paddingTopLeft: [5, 5], paddingBottomRight: [300, 5]});
			} else {
				map.fitBounds(markers.getBounds(), {maxZoom: 12, paddingTopLeft: [50, 0], paddingBottomRight: [20, 0] });
			}
		%%% elseif embed %%%
			map.fitBounds(markers.getBounds(), {padding: [5, 5]});
		%%% endif %%%
		});

%%% unless embed %%%
	if (width > 640) {
		map.setView([51.163375, 12.4476833333], 6);
	} else {
		map.setView([51.163375, 10.4476833333], 6);
	}
%%% endif %%%

</script>
